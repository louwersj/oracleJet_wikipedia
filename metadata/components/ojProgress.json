{
  "name": "ojProgress",
  "version": "4.1.0",
  "jetVersion": "4.1.0",
  "displayName": " Progress",
  "preview": true,
  "styleClasses": [
    {
      "styleGroup": [
        "oj-progress-bar-embedded"
      ],
      "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog."
    },
    {
      "styleGroup": [
        "oj-progress-bar-start-label"
      ],
      "description": "Optional class that can be set on a div after the oj-progress element. This div contains the start text to display underneath the oj-progress bar."
    },
    {
      "styleGroup": [
        "oj-progress-bar-end-label"
      ],
      "description": "Optional class that can be set on a div after the oj-progress element. This div contains the end text to display underneath the oj-progress bar."
    }
  ],
  "description": "ojProgress",
  "properties": {
    "max": {
      "description": "The maximum allowed value. The element's max attribute is used if it is provided, otherwise the default value of 100 is used.",
      "type": "number",
      "displayName": "Max",
      "value": 100
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null,
      "properties": {
        "ariaIndeterminateProgressText": {
          "description": "Accessible text read by a screen reader while an indeterminate oj-progress is in progress.\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "In Progress"
        }
      }
    },
    "type": {
      "description": "The shape of the Progress.",
      "type": "string",
      "displayName": "Type",
      "value": "bar",
      "enumValues": [
        "bar",
        "circle"
      ],
      "propertyEditorValues": {
        "bar": {
          "displayName": "Bar"
        },
        "circle": {
          "displayName": "Circle"
        }
      }
    },
    "value": {
      "description": "The value of the Progress. The element's value attribute is used if it is provided, otherwise the default value of 0 is used. For indeterminate Progress, set value to -1.",
      "type": "number",
      "displayName": "Value",
      "value": 0,
      "writeback": true
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component."
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}