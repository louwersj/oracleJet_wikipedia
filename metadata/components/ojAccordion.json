{
  "name": "ojAccordion",
  "version": "4.1.0",
  "jetVersion": "4.1.0",
  "displayName": " Accordion",
  "preview": true,
  "description": "A JET Accordion contains one or more ojCollapsible child elements",
  "properties": {
    "expanded": {
      "description": "Array contains either ids or zero-based indices of the collapsibles that should be expanded.\nSetter value: array of either ids or indices.\nGetter value: array of either ids or indices. If an expanded collapsible has a page author provided id, that id is returned, otherwise that collapsible's index will be returned.",
      "type": "Array",
      "displayName": "Expanded",
      "value": null,
      "writeback": true
    },
    "multiple": {
      "description": "Allow multiple collapsibles to be open at the same time. \nNote: if multiple is true, the beforeCollapse/beforeExpand/collapse/expand events will not be fired by the accordion. They are however fired by the collapsibles.",
      "type": "boolean",
      "displayName": "Multiple",
      "value": false
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the visual state of the accordion. \n\nThis method does not accept any arguments."
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "events": {
    "beforeExpand": {
      "description": "Triggered immediately before any collapsible in the accordion is expanded.\nCall event.preventDefault() in the event listener to veto the event, which prevents the content from expanding.\nIf multiple is true, the beforeExpand event will not be fired by the accordion.",
      "detail": {
        "toCollapsible": {
          "description": "The collapsible being expanded.",
          "type": "Element"
        },
        "fromCollapsible": {
          "description": "The collapsible being collapsed.",
          "type": "Element"
        }
      }
    },
    "expand": {
      "description": "Triggered after the accordion has been expanded (after animation completes).\nThe expand can be cancelled by calling event.preventDefault().\nIf multiple is true, the expand event will not be fired by the accordion.",
      "detail": {
        "toCollapsible": {
          "description": "The collapsible being expanded.",
          "type": "Element"
        },
        "fromCollapsible": {
          "description": "The collapsible being collapsed.",
          "type": "Element"
        }
      }
    },
    "beforeCollapse": {
      "description": "Triggered immediately before any collapsible in the accordion is collapsed.\nCall event.preventDefault() in the event listener to veto the event, which prevents the content from collapsing.\nIf multiple is true, the beforeCollapse event will not be fired by the accordion.",
      "detail": {
        "toCollapsible": {
          "description": "The collapsible being expanded.",
          "type": "Element"
        },
        "fromCollapsible": {
          "description": "The collapsible being collapsed.",
          "type": "Element"
        }
      }
    },
    "collapse": {
      "description": "Triggered after any collapsible in the accordion has been collapsed (after animation completes).\nThe collapse can be cancelled by calling event.preventDefault().\nIf multiple is true, the collapse event will not be fired by the accordion.",
      "detail": {
        "toCollapsible": {
          "description": "The collapsible being expanded.",
          "type": "Element"
        },
        "fromCollapsible": {
          "description": "The collapsible being collapsed.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "": {
      "description": "The <oj-accordion> element accepts one or more <oj-collapsible> elements as children.",
      "displayName": "default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}